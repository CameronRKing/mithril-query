{
  "name": "mithril-query",
  "version": "0.4.1",
  "description": "Query mithril virtual dom for testing purposes",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/tape/bin/tape test.js "
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:StephanHoyer/mithril-query.git"
  },
  "keywords": [
    "mithril",
    "query",
    "test"
  ],
  "author": {
    "name": "Stephan Hoyer",
    "email": "ste.hoyer@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/StephanHoyer/mithril-query/issues"
  },
  "homepage": "https://github.com/StephanHoyer/mithril-query",
  "devDependencies": {
    "mithril": "^0.1.27",
    "tape": "^3.0.3"
  },
  "dependencies": {
    "cssauron": "^1.2.0"
  },
  "readme": "mithril-query\n=============\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/StephanHoyer/mithril-query?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nQuery mithril virtual dom for testing purposes\n\nInstallation\n------------\n\n    npm install mithril-query --save-dev\n\nUsage\n-----\n\nYou can run this tests serverside or use browserify and run them in browsers.\n\n```javascript\n// simple module: simple.js\nvar m = require('Mithril');\n\nmodule.exports = {\n  controller: function() {},\n  view: function(ctrl) {\n    return m('div', [\n      m('span', 'spanContent'),\n      m('#fooId', 'fooContent'),\n      m('.barClass', 'barContent')\n    ]);\n  }\n};\n```\n\n```javascript\n// test for simple module: simple.test.js\nvar test = require('tape').test;\nvar simple = require('./simple');\nvar mq = require('mithril-query');\n\ntest('simple module', function(t) {\n  t.test('controller', function(t) {\n    t.equal(typeof simple.controller, 'function', 'should be a function');\n    t.end();\n  });\n  t.test('view', function(t) {\n    t.equal(typeof simple.view, 'function', 'should be a function');\n    var output = simple.view(simple.controller());\n    $output = mq(output);\n    t.ok($output.has('span'), 'should create span node');\n    t.ok($output.has('div > span'), 'child selectors \\o/');\n    t.ok($output.has('#fooId'), 'should create fooId node');\n    t.ok($output.has('.barClass'), 'should create barClass node');\n    t.ok($output.has(':contains(barContent)'), 'should create node with content barContent');\n    t.ok($output.contains('barContent'), 'should create node with content barContent');\n    t.end();\n  });\n});\n```\n\nRun the test with\n\n    tape simple.test.js\n\nAPI\n---\n\nFirst call the view result with the `mithril-query` function. Then the result has the following methods:\n\n### first(selector)\n\nReturns the first element that matches the selector.\n\n### find(selector)\n\nReturns all elements that match the selector.\n\n### has(selector)\n\nReturns `true` if any element in tree matches the selector, otherwise `false`.\n\n### contains(string)\n\nReturns `true` if any element in tree contains the string, otherwise `false`.\n\nIf you need any other assertions, feel free to create an issue or pull request.\n\nSelectors\n---------\n\nWe use [cssauron](https://github.com/chrisdickinson/cssauron) as engine, so look there if you want to see, what's possible.\n",
  "readmeFilename": "README.md",
  "gitHead": "b8930b06501d2083a31f674c5fd8d4f9ffe34eb4",
  "_id": "mithril-query@0.1.8",
  "_shasum": "2a0918669b7078b5de2126cc5ed3d6a478d0bf17",
  "_from": "mithril-query@^0.1.2"
}
